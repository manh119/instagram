logging:
    pattern:
        console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} [%X{requestId}] - %msg%n"
        file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} [%X{requestId}] - %msg%n"
    level:
        # Root level
        root: INFO
        com.engineerpro.example.redis.controller: INFO
        com.engineerpro.example.redis.service: INFO
        com.engineerpro.example.redis.repository: INFO
        com.engineerpro.example.redis.security: INFO
        com.engineerpro.example.redis.event: INFO
        com.engineerpro.example.redis.config: INFO

        # Framework levels
        org.springframework:
            jdbc:
                core: INFO
            web:
                filter:
                    CommonsRequestLoggingFilter: DEBUG
            security: DEBUG
            data:
                jpa: INFO
                redis: INFO
            amqp: INFO
            websocket: INFO
            messaging: INFO

        # Database levels
        org.hibernate:
            SQL: INFO
            type:
                descriptor:
                    sql:
                        BasicBinder: INFO

        # Third-party libraries
        io.minio: INFO

        # WebSocket and messaging logging
        org.springframework.web.socket: INFO
        org.springframework.messaging: INFO
        org.springframework.web.socket.handler: INFO
        org.springframework.web.socket.server: INFO

        # Application WebSocket classes
        com.engineerpro.example.redis.config.WebSocketConfig: INFO
        com.engineerpro.example.redis.controller.WebSocketController: INFO
        com.engineerpro.example.redis.service.NotificationWebSocketService: INFO
---
# Default configuration - applies to all profiles
spring:
    profiles:
        active: dev
    websocket:
        enabled: true
    data:
        redis:
            database: ${REDIS_DATABASE}
            host: ${REDIS_HOST}
            port: ${REDIS_PORT}
            password: ${REDIS_PASSWORD}
    datasource:
        password: ${DB_PASSWORD}
        tomcat:
            max-active: 50
            max-wait: 10000
            test-on-borrow: true
        url: jdbc:mysql://${DB_HOST}/${DB_NAME}
        username: ${DB_USERNAME}
    jpa:
        generate-ddl: true
        hibernate:
            ddl-auto: update
        show-sql: true
    jackson:
        serialization:
            write-dates-as-timestamps: false
        deserialization:
            fail-on-unknown-properties: false
        time-zone: UTC
    rabbitmq:
        host: ${RABBITMQ_HOST}
        port: ${RABBITMQ_PORT}
        stomp:
            relay:
                host: ${RABBITMQ_STOMP_HOST}
                port: ${RABBITMQ_STOMP_PORT}
                login: ${RABBITMQ_USERNAME}
                passcode: ${RABBITMQ_PASSWORD}
    security:
        oauth2:
            client:
                registration:
                    google:
                        client-id: ${GOOGLE_CLIENT_ID}
                        client-secret: ${GOOGLE_CLIENT_SECRET}
                        scope:
                            - email
                            - profile
                        redirect-uri: "${GOOGLE_REDIRECT_URI}"
                        client-authentication-method: client_secret_post
                        authorization-grant-type: authorization_code
                        client-name: Google
                provider:
                    google:
                        authorization-uri: https://accounts.google.com/o/oauth2/auth
                        token-uri: https://oauth2.googleapis.com/token
                        user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
                        user-name-attribute: sub
                        jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs
    io.minio:
        endpoint: ${MINIO_ENDPOINT}
        external-endpoint: ${MINIO_EXTERNAL_ENDPOINT} # use when frontend needs to access from host
        access-key: ${MINIO_ACCESS_KEY}
        secret-key: ${MINIO_SECRET_KEY}
        bucket-name: ${MINIO_BUCKET_NAME}

logging:
    file:
        name: ./development_logs/application.log
# JWT Configuration - Use environment variables for security
jwt:
    secret: ${JWT_SECRET}
    expiration: ${JWT_EXPIRATION} # 24 hours in milliseconds

# OAuth2 Configuration
app:
    oauth2:
        redirect-uri: ${OAUTH2_REDIRECT_URI}

# Actuator Configuration
management:
    endpoints:
        web:
            base-path: /api/actuator
            exposure:
                include: health,info
    endpoint:
        health:
            show-details: when-authorized

# Swagger UI Configuration
springdoc:
    api-docs:
        path: /api-docs
    swagger-ui:
        path: /swagger-ui
        tags-sorter: alpha
        operations-sorter: alpha
        doc-expansion: none
        disable-swagger-default-url: true
        display-request-duration: true
        filter: true
        try-it-out-enabled: true
        request-interceptor: true
        # Custom CSS for better UX
        custom-css: |
            .swagger-ui .topbar { display: none; }
            .swagger-ui .info { margin: 20px 0; }
            .swagger-ui .scheme-container { margin: 20px 0; }
            .swagger-ui .auth-wrapper { margin: 20px 0; }
            .swagger-ui .auth-container { padding: 20px; background: #f8f9fa; border-radius: 8px; }
            .swagger-ui .auth-container h4 { color: #333; margin-bottom: 15px; }
            .swagger-ui .auth-container p { color: #666; margin-bottom: 10px; }
            .swagger-ui .auth-container code { background: #e9ecef; padding: 2px 6px; border-radius: 4px; }
---
spring.config.activate.on-profile: prod
# Production-specific overrides only
spring:
    data:
        redis:
            password: ${REDIS_PASSWORD} # Only add password for production
    websocket:
        enabled: true
    rabbitmq:
        username: ${RABBITMQ_USERNAME} # Only add username for production
        password: ${RABBITMQ_PASSWORD} # Only add password for production
    io.minio:
        endpoint: ${MINIO_ENDPOINT}
        external-endpoint: ${MINIO_EXTERNAL_ENDPOINT} # use when frontend needs to access from host
        access-key: ${MINIO_ACCESS_KEY}
        secret-key: ${MINIO_SECRET_KEY}
        bucket-name: ${MINIO_BUCKET_NAME}

# Production logging configuration
logging:
    file:
        name: /app/logs/application.log
# Media serving configuration
media:
    base-url: ${MEDIA_BASE_URL}
    images:
        path: /images
    videos:
        path: /videos
