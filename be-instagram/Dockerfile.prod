# Multi-stage build for Spring Boot application
FROM gradle:8.5-jdk17-alpine AS builder

WORKDIR /app

# Copy Gradle wrapper and build scripts first
COPY gradlew gradlew.bat build.gradle settings.gradle ./
COPY gradle gradle
COPY gradle/wrapper gradle/wrapper

# Make gradlew executable
RUN chmod +x gradlew

# Create gradle cache dir
RUN mkdir -p /home/gradle/.gradle

# Download dependencies (this will be cached if build.gradle/settings.gradle don't change)
RUN ./gradlew dependencies --no-daemon --build-cache

# Copy source code
COPY src src
# Create .env.prod from environment variables at build time
RUN echo "SPRING_PROFILES_ACTIVE=prod" > .env.prod && \
    echo "SERVER_PORT=8080" >> .env.prod && \
    echo "DB_HOST=${DB_HOST}" >> .env.prod && \
    echo "DB_PORT=${DB_PORT}" >> .env.prod && \
    echo "DB_NAME=${DB_NAME}" >> .env.prod && \
    echo "DB_USERNAME=${DB_USERNAME}" >> .env.prod && \
    echo "DB_PASSWORD=${DB_PASSWORD}" >> .env.prod && \
    echo "DB_ROOT_PASSWORD=${DB_ROOT_PASSWORD}" >> .env.prod && \
    echo "REDIS_HOST=${REDIS_HOST}" >> .env.prod && \
    echo "REDIS_PORT=${REDIS_PORT}" >> .env.prod && \
    echo "REDIS_DATABASE=${REDIS_DATABASE}" >> .env.prod && \
    echo "REDIS_PASSWORD=${REDIS_PASSWORD}" >> .env.prod && \
    echo "RABBITMQ_HOST=${RABBITMQ_HOST}" >> .env.prod && \
    echo "RABBITMQ_PORT=${RABBITMQ_PORT}" >> .env.prod && \
    echo "RABBITMQ_USERNAME=${RABBITMQ_USERNAME}" >> .env.prod && \
    echo "RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}" >> .env.prod && \
    echo "RABBITMQ_VHOST=${RABBITMQ_VHOST}" >> .env.prod && \
    echo "RABBITMQ_STOMP_HOST=${RABBITMQ_STOMP_HOST}" >> .env.prod && \
    echo "RABBITMQ_STOMP_PORT=${RABBITMQ_STOMP_PORT}" >> .env.prod && \
    echo "JWT_SECRET=${JWT_SECRET}" >> .env.prod && \
    echo "JWT_EXPIRATION=${JWT_EXPIRATION}" >> .env.prod && \
    echo "JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION}" >> .env.prod && \
    echo "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" >> .env.prod && \
    echo "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}" >> .env.prod && \
    echo "GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}" >> .env.prod && \
    echo "OAUTH2_REDIRECT_URI=${OAUTH2_REDIRECT_URI}" >> .env.prod && \
    echo "MINIO_ENDPOINT=${MINIO_ENDPOINT}" >> .env.prod && \
    echo "MINIO_EXTERNAL_ENDPOINT=${MINIO_EXTERNAL_ENDPOINT}" >> .env.prod && \
    echo "MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}" >> .env.prod && \
    echo "MINIO_SECRET_KEY=${MINIO_SECRET_KEY}" >> .env.prod && \
    echo "MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}" >> .env.prod && \
    echo "MEDIA_BASE_URL=${MEDIA_BASE_URL}" >> .env.prod && \
    echo "CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}" >> .env.prod && \
    echo "LOGGING_FILE_NAME=${LOGGING_FILE_NAME}" >> .env.prod && \
    echo "DEBUG=false" >> .env.prod && \
    echo "TRACE=false" >> .env.prod

# Build application (reuses cached dependencies)
RUN ./gradlew build -x test --no-daemon --build-cache

# -----------------------
# Runtime image
FROM eclipse-temurin:17-jre-alpine AS runtime

RUN apk add --no-cache wget tzdata \
    && rm -rf /var/cache/apk/*

RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

WORKDIR /app

COPY --from=builder /app/build/libs/*.jar app.jar

RUN mkdir -p /app/logs /app/data && \
    chown -R appuser:appgroup /app

USER appuser

EXPOSE 8080

ENV JAVA_OPTS="-Xms512m -Xmx1024m -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/./urandom"

HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/api/actuator/health || exit 1

CMD ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]
