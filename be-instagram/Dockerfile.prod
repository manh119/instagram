# Multi-stage build for Spring Boot application
# Stage 1: Build the application
FROM gradle:8.5-jdk17-alpine AS builder

# Set working directory
WORKDIR /app

# Copy gradle files first for better caching
COPY gradle/ gradle/
COPY gradlew gradlew.bat build.gradle settings.gradle ./
COPY gradle/wrapper/ gradle/wrapper/

# Make gradlew executable
RUN chmod +x gradlew

# Download dependencies (this layer will be cached if dependencies don't change)
# Added build cache for better performance
RUN gradle dependencies --no-daemon --build-cache --gradle-user-home=/tmp/.gradle

# Copy source code
COPY src/ src/

# Build the application with build cache
RUN gradle build -x test --no-daemon --build-cache --gradle-user-home=/tmp/.gradle

# Stage 2: Runtime image
FROM eclipse-temurin:17-jre-alpine AS runtime

# Install only necessary packages (removed curl and busybox-extras)
RUN apk add --no-cache \
    wget \
    tzdata \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Set timezone
ENV TZ=UTC

# Create application directory
WORKDIR /app

# Copy the built JAR from builder stage
COPY --from=builder /app/build/libs/spring-app-1.0.jar app.jar

# Create directories for logs and data
RUN mkdir -p /app/logs /app/data && \
    chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose ports
EXPOSE 8080

# Set JVM options for production
ENV JAVA_OPTS="-Xms512m -Xmx1024m -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/./urandom"

# Health check using wget (lighter than curl)
HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/api/actuator/health || exit 1

# Default command for production
CMD ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]
